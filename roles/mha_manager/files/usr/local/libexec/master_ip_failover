#!/usr/bin/env perl

#  Copyright (C) 2011 DeNA Co.,Ltd.
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#  Foundation, Inc.,
#  51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

## Note: This is a sample script and is not complete. Modify the script based on your environment.

use strict;
use warnings FATAL => 'all';

use Getopt::Long;
use MHA::DBHelper;
use POSIX qw(strftime);

my (
  $command,        $ssh_user,         $orig_master_host,
  $orig_master_ip, $orig_master_port, $new_master_host,
  $new_master_ip,  $new_master_port,  $new_master_user,
  $new_master_password,
  $vip,            $ssh_options,
);

my $vip_interface = 'eth1:0';

GetOptions(
  'command=s'             => \$command,
  'ssh_user=s'            => \$ssh_user,
  'orig_master_host=s'    => \$orig_master_host,
  'orig_master_ip=s'      => \$orig_master_ip,
  'orig_master_port=i'    => \$orig_master_port,
  'new_master_host=s'     => \$new_master_host,
  'new_master_ip=s'       => \$new_master_ip,
  'new_master_port=i'     => \$new_master_port,
  'new_master_user=s'     => \$new_master_user,
  'new_master_password=s' => \$new_master_password,
  'vip=s'                 => \$vip,
  'vip_interface=s'       => \$vip_interface,
  'ssh_options=s'         => \$ssh_options,
);

exit &main();

sub main {
  if ( $command eq "stop" || $command eq "stopssh" ) {

    # $orig_master_host, $orig_master_ip, $orig_master_port are passed.
    # If you manage master ip address at global catalog database,
    # invalidate orig_master_ip here.
    my $exit_code = 1;
    eval {
      # Drop vip from orig master
      drop_vip_from_orig_master_host();
      update_banner($orig_master_host, sprintf("I was master db until %s\n", now()));
      $exit_code = 0;
    };
    if ($@) {
      warn "Got Error: $@\n";
      exit $exit_code;
    }
    exit $exit_code;
  }
  elsif ( $command eq "start" ) {

    # all arguments are passed.
    # If you manage master ip address at global catalog database,
    # activate new_master_ip here.
    # You can also grant write access (create user, set read_only=0, etc) here.
    my $exit_code = 10;
    eval {
      my $new_master_handler = new MHA::DBHelper();

      # args: hostname, port, user, password, raise_error_or_not
      $new_master_handler->connect( $new_master_ip, $new_master_port,
        $new_master_user, $new_master_password, 1 );

      ## Set read_only=0 on the new master
      $new_master_handler->disable_log_bin_local();
      print "Set read_only=0 on the new master.\n";
      $new_master_handler->disable_read_only();

      ## Creating an app user on the new master
      # print "Creating app user on the new master..\n";
      # FIXME_xxx_create_user( $new_master_handler->{dbh} );
      $new_master_handler->enable_log_bin_local();
      $new_master_handler->disconnect();

      ## Update master ip on the catalog database, etc
      attach_vip_to_new_master_host();
      ! system "set -x; ping -c 3 -i 0.1 $vip -W 10" or warn "Maybe failed to attaching vip";
      update_banner($new_master_host, master_banner());

      $exit_code = 0;
    };
    if ($@) {
      warn $@;

      # If you want to continue failover, exit 10.
      exit $exit_code;
    }
    exit $exit_code;
  }
  elsif ( $command eq "status" ) {
    check_vip();
    exit 0;
  }
  else {
    &usage();
    exit 1;
  }
}

sub usage {
  print
"Usage: master_ip_failover --command=start|stop|stopssh|status --orig_master_host=host --orig_master_ip=ip --orig_master_port=port --new_master_host=host --new_master_ip=ip --new_master_port=port\n";
}

sub now {
  strftime("%F %R", localtime());
}

sub update_banner {
  my ($host, $banner) = @_;
  eval {
    open my $fh, '>', '/tmp/banner' or die $!;
    print $fh $banner;
    close $fh or die $!;
    ! system qq|set -x; scp $ssh_options /tmp/banner ${host}:/etc/motd|
        or die "failed to update banner\n";
  };
  warn $@ if $@;
}

sub master_banner {
  sprintf <<'EOT', now();
 _____ _            ___  ___          _             ____________   _ 
|_   _( )           |  \/  |         | |            |  _  \ ___ \ | |
  | | |/ _ __ ___   | .  . | __ _ ___| |_ ___ _ __  | | | | |_/ / | |
  | |   | '_ ` _ \  | |\/| |/ _` / __| __/ _ \ '__| | | | | ___ \ | |
 _| |_  | | | | | | | |  | | (_| \__ \ ||  __/ |    | |/ /| |_/ / |_|
 \___/  |_| |_| |_| \_|  |_/\__,_|___/\__\___|_|    |___/ \____/  (_)

since %s
EOT
}

sub drop_vip_from_orig_master_host {
  remote_command($orig_master_host, "/sbin/ifconfig $vip_interface down")
    or warn "failed to drop vip on $orig_master_host";
}

sub attach_vip_to_new_master_host {
  (my $real_if = $vip_interface) =~ s/:.*//;

  my $ifconfig = qx|ssh $new_master_host $ssh_options '/sbin/ifconfig $real_if'| or do {
    warn "failed to get $real_if info on $new_master_host";
    return;
  };

  my ($netmask)   = $ifconfig =~ /Mask:([\d\.]+)/;

  remote_command($new_master_host, "/sbin/ifconfig $vip_interface $vip netmask $netmask up")
    or warn "failed to up vip on $new_master_host";

  sleep 1;

  remote_command($new_master_host, "arping -U $vip -I $real_if -c 3");
}

sub check_vip {
  (my $real_if = $vip_interface) =~ s/:.*//;

  my $ifconfig = qx|ssh $orig_master_host $ssh_options '/sbin/ifconfig $real_if'| or do {
    warn "failed to get $real_if info on $orig_master_host";
    return;
  };

  my ($netmask)   = $ifconfig =~ /Mask:([\d\.]+)/;

  remote_command($orig_master_host, "/sbin/ifconfig | grep -q '^$vip_interface '")
    or warn <<EOT;

  WARN: $vip_interface does not extist in current master: $orig_master_host
  please try below (if called via masterha_check_repl):
    /sbin/ifconfig $vip_interface $vip netmask $netmask up
    arping -U $vip -I $real_if -c 3

EOT
}

sub remote_command {
  my ($host, $cmd) = @_;
  ! system qq|set -x; ssh $host $ssh_options '$cmd'|;
}

